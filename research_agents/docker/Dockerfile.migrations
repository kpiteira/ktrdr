# Dockerfile for Database Migrations
# Runs database schema setup and migrations

FROM python:3.11-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    postgresql-client \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create app user for security
RUN useradd --create-home --shell /bin/bash app

# Set work directory
WORKDIR /app

# Install minimal Python dependencies
RUN pip install --no-cache-dir --upgrade pip
RUN pip install --no-cache-dir asyncpg psycopg2-binary

# Copy database files
COPY research_agents/database/ /app/database/

# Create migration script
RUN cat > /app/run_migrations.py << 'EOF'
#!/usr/bin/env python3
"""
Database migration runner for KTRDR Research Agents
"""
import asyncio
import logging
import os
import sys
from pathlib import Path

import asyncpg

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def run_migrations():
    """Run database migrations"""
    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        logger.error("DATABASE_URL environment variable is required")
        sys.exit(1)
    
    try:
        # Connect to database
        conn = await asyncpg.connect(database_url)
        logger.info("Connected to database")
        
        # Check if schema.sql exists and run it
        schema_file = Path("/app/database/schema.sql")
        if schema_file.exists():
            logger.info("Running schema.sql...")
            with open(schema_file, 'r') as f:
                schema_sql = f.read()
            await conn.execute(schema_sql)
            logger.info("Schema migration completed")
        
        # Check if seed_data.sql exists and run it
        seed_file = Path("/app/database/seed_data.sql")
        if seed_file.exists():
            logger.info("Running seed_data.sql...")
            with open(seed_file, 'r') as f:
                seed_sql = f.read()
            await conn.execute(seed_sql)
            logger.info("Seed data migration completed")
        
        await conn.close()
        logger.info("Database migrations completed successfully")
        
    except Exception as e:
        logger.error(f"Migration failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(run_migrations())
EOF

# Make migration script executable
RUN chmod +x /app/run_migrations.py

# Change ownership to app user
RUN chown -R app:app /app

# Switch to app user
USER app

# Run migrations
CMD ["python", "/app/run_migrations.py"]