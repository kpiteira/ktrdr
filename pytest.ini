# Pytest configuration file

[pytest]
markers =
    asyncio: mark test as an asyncio coroutine
    api: mark a test as involving the API layer
    performance: mark tests that evaluate API performance metrics
    endpoints: mark tests that target specific API endpoints
    integration: mark tests as integration tests requiring IB Gateway
    stress: mark tests as stress tests
    real_ib: mark tests as requiring real IB Gateway connection (not mocked)
    real_cli: mark tests as requiring real CLI execution with IB
    real_api: mark tests as requiring real API calls with IB
    real_pipeline: mark tests as requiring complete data pipeline with IB
    real_error_scenarios: mark tests as requiring real IB error conditions
    container_e2e: mark tests as requiring Docker containers for E2E testing
    exhaustive_resilience: mark tests as exhaustive resilience tests
    exhaustive_api_resilience: mark tests as exhaustive API resilience tests  
    exhaustive_cli_resilience: mark tests as exhaustive CLI resilience tests
    exhaustive_integration_resilience: mark tests as exhaustive integration resilience tests

# Configuration for pytest-asyncio
asyncio_mode = strict
asyncio_default_fixture_loop_scope = function

# Filter warnings from external libraries that we cannot control
filterwarnings =
    ignore::DeprecationWarning:eventkit.util:21