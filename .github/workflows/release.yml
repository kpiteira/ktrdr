name: KTRDR Docker Release

on:
  # Removing automated triggers
  # release:
  #   types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to create (e.g. v1.0.0)'
        required: true
        type: string

jobs:
  update-version:
    name: Update Version
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Set version from release
        if: github.event_name == 'release'
        run: |
          # Strip 'v' prefix if present
          VERSION=$(echo ${{ github.event.release.tag_name }} | sed 's/^v//')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Set version from input
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Strip 'v' prefix if present
          VERSION=$(echo ${{ github.event.inputs.version }} | sed 's/^v//')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Update version files
        run: |
          # Update version in version.json
          mkdir -p ktrdr
          echo "{\"version\": \"$VERSION\"}" > ktrdr/version.json
          
          # Update version.py
          cat > ktrdr/version.py << EOF
          """
          KTRDR version module.
          
          This module provides version information for the KTRDR package.
          """
          
          __version__ = "$VERSION"
          
          VERSION = __version__
          EOF
          
          # Update metadata if exists
          if [ -f "config/ktrdr_metadata.yaml" ]; then
            sed -i "s/version:.*/version: $VERSION/" config/ktrdr_metadata.yaml
          fi
      
      - name: Commit version changes
        uses: EndBug/add-and-commit@v9
        with:
          message: "chore: bump version to ${{ env.VERSION }}"
          add: "ktrdr/version.* config/ktrdr_metadata.yaml"
          push: true
          default_author: github_actions

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: update-version
    
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ github.event_name == 'release' }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_ENV=production
      
      - name: Create release notes
        if: github.event_name == 'workflow_dispatch'
        id: release_notes
        run: |
          echo "# Release Notes for v${{ env.VERSION }}" > release_notes.md
          echo "" >> release_notes.md
          echo "## Docker Images" >> release_notes.md
          echo "" >> release_notes.md
          echo "The following Docker images were published:" >> release_notes.md
          echo "" >> release_notes.md
          echo '```' >> release_notes.md
          echo "${{ steps.meta.outputs.tags }}" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "```bash" >> release_notes.md
          echo "docker pull ghcr.io/${{ github.repository }}:${{ env.VERSION }}" >> release_notes.md
          echo "```" >> release_notes.md
      
      - name: Create GitHub Release
        if: github.event_name == 'workflow_dispatch'
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          bodyFile: release_notes.md
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Send release notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: releases
          SLACK_TITLE: "ðŸš€ New KTRDR Release"
          SLACK_MESSAGE: "Version v${{ env.VERSION }} has been released and Docker images are available."
          SLACK_COLOR: good
          SLACK_FOOTER: "Docker: ghcr.io/${{ github.repository }}:${{ env.VERSION }}"
        if: ${{ success() && secrets.SLACK_WEBHOOK != '' }}