name: KTRDR CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_ENV=${{ github.event.inputs.environment || 'production' }}
      
      - name: Generate deployment package
        run: |
          # Create a deployment package with docker-compose and config
          mkdir -p deployment
          cp docker-compose.prod.yml deployment/docker-compose.yml
          cp -r config deployment/
          echo "KTRDR_IMAGE=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" > deployment/.env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD || 'default_password_for_dev' }}" >> deployment/.env
          echo "ENVIRONMENT=${{ github.event.inputs.environment || 'production' }}" >> deployment/.env
          tar -czf deployment.tar.gz deployment/
      
      - name: Upload deployment artifact
        uses: actions/upload-artifact@v3
        with:
          name: deployment-package
          path: deployment.tar.gz
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install uv
          uv venv
          source .venv/bin/activate
          uv pip install -r requirements.txt
          # Ensure security tools are installed directly
          python -m pip install safety bandit
      
      - name: Scan dependencies with safety
        run: |
          source .venv/bin/activate
          python -m safety check -r requirements.txt --full-report
      
      - name: Scan code with bandit
        run: |
          source .venv/bin/activate
          python -m bandit -r ktrdr/ -f json -o security-report.json
      
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.json
          retention-days: 30

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    # Only deploy on main branch or tags, or when triggered manually
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v3
        with:
          name: deployment-package
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
      
      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
      
      - name: Deploy to server
        run: |
          scp deployment.tar.gz ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/tmp/
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
            mkdir -p ~/ktrdr
            tar -xzf /tmp/deployment.tar.gz -C ~/ktrdr
            cd ~/ktrdr/deployment
            docker-compose down
            docker-compose up -d
            rm /tmp/deployment.tar.gz
          "
      
      - name: Verify deployment
        run: |
          # Wait for the service to start (adjust timeout as needed)
          sleep 30
          # Check if the service is available
          curl --fail --max-time 10 http://${{ secrets.DEPLOY_HOST }}:8000/api/health || exit 1
      
      - name: Send deployment notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_TITLE: "KTRDR Deployment"
          SLACK_MESSAGE: "ðŸš€ Successfully deployed KTRDR to ${{ github.event.inputs.environment || 'production' }} environment"
          SLACK_COLOR: ${{ job.status }}
          SLACK_FOOTER: "View deployment: http://${{ secrets.DEPLOY_HOST }}:8000/api/docs"
        if: ${{ success() && secrets.SLACK_WEBHOOK != '' }}