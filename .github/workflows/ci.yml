name: CI Pipeline

on:
  push:
    branches: [ main, develop, test-suite-cleanup ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggers

jobs:
  unit-tests:
    name: Unit Tests (Fast)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Set up Python
      run: uv python install
    
    - name: Install dependencies
      run: uv sync --all-extras --dev
    
    - name: Run unit tests
      run: |
        uv run pytest tests/ \
          -m "not (integration or real_ib or container_api or container_cli or e2e or container_e2e)" \
          --tb=short \
          --maxfail=10 \
          -v \
          --junit-xml=test-results.xml
      env:
        PYTHONDONTWRITEBYTECODE: "1"
        PYTHONUNBUFFERED: "1"
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: test-results.xml

  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Set up Python
      run: uv python install
    
    - name: Install dependencies
      run: uv sync --all-extras --dev
    
    - name: Check formatting with black
      run: uv run black --check ktrdr tests
    
    - name: Run type checking with mypy
      run: uv run mypy ktrdr
      continue-on-error: true  # Don't fail CI for type issues, just report them

  container-e2e-tests:
    name: Container E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    # Only run on main/develop pushes or when manually triggered
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Set up Python
      run: uv python install
    
    - name: Install dependencies
      run: uv sync --all-extras --dev
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start Docker containers
      run: |
        chmod +x ./docker_dev.sh
        ./docker_dev.sh start
        
    - name: Wait for services to be ready
      run: |
        echo "Waiting for containers to start..."
        sleep 45
        
        # Check if containers are running
        docker-compose -f docker/docker-compose.yml ps
        
        # Wait for API health endpoint (if it exists)
        for i in {1..24}; do
          if curl -f http://localhost:8000/health > /dev/null 2>&1; then
            echo "API is ready!"
            break
          elif curl -f http://localhost:8000/ > /dev/null 2>&1; then
            echo "API is responding!"
            break
          fi
          
          if [ $i -eq 24 ]; then
            echo "API failed to respond after 2 minutes"
            echo "Container logs:"
            docker-compose -f docker/docker-compose.yml logs backend
            exit 1
          fi
          
          echo "Waiting for API... (attempt $i/24)"
          sleep 5
        done
    
    - name: Run container E2E tests
      run: |
        uv run pytest tests/e2e/ \
          --run-container-e2e \
          --run-container-cli \
          --tb=short \
          --maxfail=5 \
          -v \
          --junit-xml=container-test-results.xml
      env:
        PYTHONDONTWRITEBYTECODE: "1"
        PYTHONUNBUFFERED: "1"
    
    - name: Upload container test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-test-results
        path: container-test-results.xml
    
    - name: Show container logs on failure
      if: failure()
      run: |
        echo "=== Backend logs ==="
        docker-compose -f docker/docker-compose.yml logs --tail=100 backend
        echo "=== Frontend logs ==="
        docker-compose -f docker/docker-compose.yml logs --tail=100 frontend
    
    - name: Stop containers
      if: always()
      run: ./docker_dev.sh stop

  # Manual workflow for integration tests (will use mocked IB)
  integration-tests:
    name: Integration Tests (Mocked IB)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Set up Python
      run: uv python install
    
    - name: Install dependencies
      run: uv sync --all-extras --dev
    
    - name: Run integration tests (mocked)
      run: |
        # These tests will use the disable_retries fixture to mock IB calls
        uv run pytest tests/integration/ \
          --tb=short \
          --maxfail=5 \
          -v \
          --junit-xml=integration-test-results.xml
      env:
        PYTHONDONTWRITEBYTECODE: "1"
        PYTHONUNBUFFERED: "1"
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: integration-test-results.xml

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, lint-and-format]
    if: always()
    
    steps:
    - name: Download test artifacts
      uses: actions/download-artifact@v4
      continue-on-error: true
    
    - name: Test Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f unit-test-results/test-results.xml ]; then
          echo "✅ Unit tests completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Unit tests failed or not run" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f container-test-results/container-test-results.xml ]; then
          echo "✅ Container E2E tests completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⏭️ Container E2E tests skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Note**: Integration tests requiring real IB Gateway are not run in CI." >> $GITHUB_STEP_SUMMARY
        echo "Use \`./scripts/run_real_e2e_tests.sh\` locally for complete testing." >> $GITHUB_STEP_SUMMARY