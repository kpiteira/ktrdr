name: CI Pipeline

on:
  push:
    branches: [ main, develop, fix/test-suite-performance ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  unit-tests-and-quality:
    name: Unit Tests & Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Set up Python
      run: uv python install
    
    - name: Install dependencies
      run: uv sync --all-extras --dev
    
    - name: Run unit tests with coverage
      run: |
        make test-coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-unit
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Run quality checks
      run: make quality
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: unit-test-results.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests-and-quality
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    - uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Set up Python
      run: uv python install
    
    - name: Install dependencies
      run: uv sync --all-extras --dev
    
    - name: Run integration tests
      run: |
        make test-integration
      env:
        PYTHONDONTWRITEBYTECODE: "1"
        PYTHONUNBUFFERED: "1"
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: integration-test-results.xml

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests-and-quality
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    - uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Set up Python
      run: uv python install
    
    - name: Install dependencies
      run: uv sync --all-extras --dev
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start Docker containers
      run: |
        chmod +x ./docker_dev.sh
        ./docker_dev.sh start
        
    - name: Wait for services to be ready
      run: |
        echo "Waiting for containers to start..."
        sleep 45
        
        # Check if containers are running
        docker-compose -f docker/docker-compose.yml ps
        
        # Wait for API health endpoint (if it exists)
        for i in {1..24}; do
          if curl -f http://localhost:8000/health > /dev/null 2>&1; then
            echo "API is ready!"
            break
          elif curl -f http://localhost:8000/ > /dev/null 2>&1; then
            echo "API is responding!"
            break
          fi
          
          if [ $i -eq 24 ]; then
            echo "API failed to respond after 2 minutes"
            echo "Container logs:"
            docker-compose -f docker/docker-compose.yml logs backend
            exit 1
          fi
          
          echo "Waiting for API... (attempt $i/24)"
          sleep 5
        done
    
    - name: Run E2E tests
      run: |
        make test-e2e
      env:
        PYTHONDONTWRITEBYTECODE: "1"
        PYTHONUNBUFFERED: "1"
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: e2e-test-results.xml
    
    - name: Show container logs on failure
      if: failure()
      run: |
        echo "=== Backend logs ==="
        docker-compose -f docker/docker-compose.yml logs --tail=100 backend
        echo "=== Frontend logs ==="
        docker-compose -f docker/docker-compose.yml logs --tail=100 frontend
    
    - name: Stop containers
      if: always()
      run: ./docker_dev.sh stop


  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests-and-quality]
    if: always()
    
    steps:
    - name: Download test artifacts
      uses: actions/download-artifact@v4
      continue-on-error: true
    
    - name: Test Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f unit-test-results/unit-test-results.xml ]; then
          echo "✅ Unit tests & code quality completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Unit tests or code quality failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f integration-test-results/integration-test-results.xml ]; then
          echo "✅ Integration tests completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⏭️ Integration tests skipped (manual trigger only)" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f e2e-test-results/e2e-test-results.xml ]; then
          echo "✅ E2E tests completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⏭️ E2E tests skipped (manual trigger only)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Note**: Integration and E2E tests require manual workflow_dispatch trigger." >> $GITHUB_STEP_SUMMARY
        echo "Host service tests requiring real IB Gateway should be run locally with \`make test-host\`." >> $GITHUB_STEP_SUMMARY